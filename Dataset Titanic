import numpy as np #Algebra Lineal
import pandas as pd # procesamiento de datos, E/S de archivos CSV (por ejemplo, pd.read_csv)

# Los archivos de datos de entrada están disponibles en el directorio de solo lectura "../input/"
# Por ejemplo, al ejecutar esto (haciendo clic en ejecutar o presionando Shift+Enter) se mostrarán todos los archivos en el directorio de entrada.

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

#Puede escribir hasta 20 GB en el directorio actual (/kaggle/working/) que se conserva como salida cuando crea una versión usando "Guardar y ejecutar todo".
#También puedes escribir archivos temporales en /kaggle/temp/, pero no se guardarán fuera de la sesión actual.

file = "/kaggle/input/titanic-dataset/Titanic-Dataset.csv"
df = pd.read_csv(file)

df.head()

df.dtypes

# Detectar valores faltantes en el conjunto de datos
missing_values = df.isnull().sum()
print(missing_values)

#Calcular el porcentaje de valores faltantes
missing_porcentage = (df.isnull().mean() * 100)
print(missing_percentage)

missing_values #Affichage exento

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Visualizar las distribuciones de variables numéricas (histogramas y gráficos kde)
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Histogramas y gráficos de estimación de densidad de kernel (KDE)
for col in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribution of {col}')
    plt.show()

# Diagramas de caja para identificar valores atípicos
for col in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[col])
    plt.title(f'Boxplot of {col}')
    plt.show()

# Identificar valores atípicos utilizando el rango intercuartil (RIC)
Q1 = df[numerical_columns].quantile(0.25)
Q3 = df[numerical_columns].quantile(0.75)
IQR = Q3 - Q1

outliers = ((df[numerical_columns] < (Q1 - 1.5 * IQR)) | (df[numerical_columns] > (Q3 + 1.5 * IQR)))

outliers_sum = outliers.sum()  # Count of outliers per variable
outliers_sum

# Calcular la matriz de correlación para variables numéricas
correlation_matrix = df[numerical_columns].corr()
# Mostrar la matriz de correlación como un mapa de calor
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix of Numerical Variables')
plt.show()
